shiny::runApp()
runApp()
library(shiny)
ui <- fluidPage(
# First panel: Survey
conditionalPanel(
condition = "output.page == 'survey'",
textInput("name", "Enter your name"),
numericInput("age", "Enter your age", value = 20),
actionButton("submit_survey", "Submit")
),
# Second panel: Feedback
conditionalPanel(
condition = "output.page == 'feedback'",
textOutput("feedback")
)
)
server <- function(input, output, session) {
# Reactive value to track app state
app_state <- reactiveVal("survey")
# Reactive value to store user data and ID
user_data <- reactiveValues()
observeEvent(input$submit_survey, {
# Generate a unique ID (could be UUID, random, or time-based)
unique_id <- paste0("user_", as.character(Sys.time()))
# Save user data (could also write to a database or file)
user_data$id <- unique_id
user_data$name <- input$name
user_data$age <- input$age
# Switch to feedback section
app_state("feedback")
})
# Set the output page condition for conditional panels
output$page <- renderText({
app_state()
})
# Provide feedback based on user responses
output$feedback <- renderText({
if (!is.null(user_data$id)) {
paste("Thank you, ", user_data$name, "! You are ", user_data$age, " years old.", sep = "")
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
tabsetPanel(id = "main_tabs",
tabPanel("Survey",
textInput("name", "Enter your name"),
numericInput("age", "Enter your age", value = 20),
actionButton("submit_survey", "Submit")
),
tabPanel("Feedback",
textOutput("feedback")
)
)
)
server <- function(input, output, session) {
# Reactive value to store user data
user_data <- reactiveValues()
observeEvent(input$submit_survey, {
# Save user data
user_data$name <- input$name
user_data$age <- input$age
# Automatically switch to the Feedback tab
updateTabsetPanel(session, "main_tabs", "Feedback")
})
# Provide feedback based on user responses
output$feedback <- renderText({
if (!is.null(user_data$name) && !is.null(user_data$age)) {
paste("Thank you,", user_data$name, "!", "You are", user_data$age, "years old.")
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
tabsetPanel(id = "main_tabs",
tabPanel("Survey",
textInput("name", "Enter your name"),
numericInput("age", "Enter your age", value = 20),
actionButton("submit_survey", "Submit")
),
tabPanel("Feedback",
textInput("unique_id", "Enter your Unique ID to see your feedback"),
actionButton("get_feedback", "Get Feedback"),
textOutput("feedback")
)
)
)
server <- function(input, output, session) {
# File to store the responses
file_path <- "responses.csv"
observeEvent(input$submit_survey, {
# Generate a unique ID
unique_id <- paste0("user_", as.character(Sys.time()))
# Create a dataframe with user data
user_data <- data.frame(
id = unique_id,
name = input$name,
age = input$age,
stringsAsFactors = FALSE
)
# Check if file exists, append or create a new file
if (file.exists(file_path)) {
write.table(user_data, file = file_path, append = TRUE, row.names = FALSE, col.names = FALSE, sep = ",")
} else {
write.csv(user_data, file = file_path, row.names = FALSE)
}
# Display the unique ID to the user so they can retrieve their feedback later
showModal(modalDialog(
title = "Submission Successful!",
paste("Your unique ID is:", unique_id),
easyClose = TRUE
))
# Automatically switch to the feedback tab
updateTabsetPanel(session, "main_tabs", "Feedback")
})
# Feedback part, reading data from the file
observeEvent(input$get_feedback, {
if (file.exists(file_path)) {
# Read the file
all_responses <- read.csv(file_path, stringsAsFactors = FALSE)
# Search for the user by their unique ID
user_response <- all_responses[all_responses$id == input$unique_id, ]
# Display feedback if ID found
if (nrow(user_response) > 0) {
output$feedback <- renderText({
paste("Thank you,", user_response$name, "!", "You are", user_response$age, "years old.")
})
} else {
output$feedback <- renderText("Invalid ID. Please try again.")
}
} else {
output$feedback <- renderText("No data found.")
}
})
}
shinyApp(ui = ui, server = server)
library(shiny)
ui <- fluidPage(
tabsetPanel(id = "main_tabs",
tabPanel("Survey",
textInput("name", "Enter your name"),
numericInput("age", "Enter your age", value = 20),
actionButton("submit_survey", "Submit")
),
tabPanel("Feedback",
textOutput("feedback")
)
)
)
server <- function(input, output, session) {
# File to store the responses
file_path <- "responses.csv"
# When survey is submitted
observeEvent(input$submit_survey, {
# Generate a unique ID (you can also use uuid or other methods)
unique_id <- paste0("user_", as.character(Sys.time()))
# Create a dataframe with user data
user_data <- data.frame(
id = unique_id,
name = input$name,
age = input$age,
stringsAsFactors = FALSE
)
# Check if file exists, append or create a new file
if (file.exists(file_path)) {
write.table(user_data, file = file_path, append = TRUE, row.names = FALSE, col.names = FALSE, sep = ",")
} else {
write.csv(user_data, file = file_path, row.names = FALSE)
}
# Automatically switch to the feedback tab
# Construct the URL with the unique ID as a query parameter
feedback_url <- paste0("?id=", unique_id)
# Redirect to the feedback page with the unique ID
session$sendCustomMessage("redirect", feedback_url)
})
# Feedback part: check if there's a query parameter (the unique ID)
observe({
query <- parseQueryString(session$clientData$url_search)
if (!is.null(query$id)) {
# If there's an ID in the URL, read the file and find the corresponding response
if (file.exists(file_path)) {
# Read the file
all_responses <- read.csv(file_path, stringsAsFactors = FALSE)
# Search for the user by their unique ID
user_response <- all_responses[all_responses$id == query$id, ]
# Display feedback if ID found
if (nrow(user_response) > 0) {
output$feedback <- renderText({
paste("Thank you,", user_response$name, "!", "You are", user_response$age, "years old.")
})
} else {
output$feedback <- renderText("No matching response found.")
}
} else {
output$feedback <- renderText("No data found.")
}
}
})
}
# JavaScript code to handle redirection
jsCode <- "
Shiny.addCustomMessageHandler('redirect', function(url) {
window.location.href = url;
});
"
# Include the JS code in the app
ui <- tagList(
tags$head(tags$script(HTML(jsCode))),
ui
)
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Initialize shinyjs for disabling inputs
tabsetPanel(id = "main_tabs",
tabPanel("Survey Part 1",
textInput("name", "Enter your name"),
numericInput("age", "Enter your age", value = 20),
actionButton("next_page", "Next")
),
tabPanel("Survey Part 2",
textInput("hobby", "Enter your hobby"),
textInput("favorite_food", "Enter your favorite food"),
actionButton("submit_survey", "Submit")
),
tabPanel("Feedback",
textOutput("feedback")
)
)
)
server <- function(input, output, session) {
# File to store the responses
file_path <- "responses.csv"
# Navigate to the next page
observeEvent(input$next_page, {
updateTabsetPanel(session, "main_tabs", "Survey Part 2")
})
# When the survey is submitted
observeEvent(input$submit_survey, {
# Generate a unique ID
unique_id <- paste0("user_", as.character(Sys.time()))
# Create a dataframe with user data
user_data <- data.frame(
id = unique_id,
name = input$name,
age = input$age,
hobby = input$hobby,
favorite_food = input$favorite_food,
stringsAsFactors = FALSE
)
# Check if file exists, append or create a new file
if (file.exists(file_path)) {
write.table(user_data, file = file_path, append = TRUE, row.names = FALSE, col.names = FALSE, sep = ",")
} else {
write.csv(user_data, file = file_path, row.names = FALSE)
}
# Automatically switch to the feedback tab
feedback_url <- paste0("?id=", unique_id)
session$sendCustomMessage("redirect", feedback_url)
# Disable inputs after submission
disable("name")
disable("age")
disable("hobby")
disable("favorite_food")
# Optionally, show a modal confirming submission
showModal(modalDialog(
title = "Survey Submitted",
"Your responses have been submitted and cannot be modified.",
easyClose = TRUE
))
# Switch to the feedback tab
updateTabsetPanel(session, "main_tabs", "Feedback")
})
# Feedback part: check if there's a query parameter (the unique ID)
observe({
query <- parseQueryString(session$clientData$url_search)
if (!is.null(query$id)) {
# If there's an ID in the URL, read the file and find the corresponding response
if (file.exists(file_path)) {
all_responses <- read.csv(file_path, stringsAsFactors = FALSE)
# Search for the user by their unique ID
user_response <- all_responses[all_responses$id == query$id, ]
# Display feedback if ID found
if (nrow(user_response) > 0) {
output$feedback <- renderText({
paste("Thank you,", user_response$name, "!", "You are", user_response$age, "years old.",
"Your hobby is", user_response$hobby, "and your favorite food is", user_response$favorite_food, ".")
})
} else {
output$feedback <- renderText("No matching response found.")
}
} else {
output$feedback <- renderText("No data found.")
}
}
})
}
# JavaScript code to handle redirection
jsCode <- "
Shiny.addCustomMessageHandler('redirect', function(url) {
window.location.href = url;
});
"
# Include the JS code in the app
ui <- tagList(
tags$head(tags$script(HTML(jsCode))),
ui
)
shinyApp(ui = ui, server = server)
library(shiny)
library(shinyjs)
ui <- fluidPage(
useShinyjs(),  # Initialize shinyjs for disabling inputs
div(id = "survey",
# Step 1
div(id = "step1",
h3("Step 1"),
textInput("name", "Enter your name"),
numericInput("age", "Enter your age", value = 20),
actionButton("next1", "Next")
),
# Step 2
div(id = "step2", style = "display:none;",
h3("Step 2"),
textInput("hobby", "Enter your hobby"),
textInput("favorite_food", "Enter your favorite food"),
actionButton("prev2", "Previous"),
actionButton("next2", "Next")
),
# Step 3: Confirmation and Submit
div(id = "step3", style = "display:none;",
h3("Confirm and Submit"),
verbatimTextOutput("summary"),
actionButton("prev3", "Previous"),
actionButton("submit_survey", "Submit")
)
),
div(id = "feedback", style = "display:none;",
h3("Feedback"),
textOutput("feedback")
)
)
server <- function(input, output, session) {
# File to store the responses
file_path <- "responses.csv"
# Reactive value to track the current step
step <- reactiveVal(1)
# Update the UI to show/hide different steps
observe({
if (step() == 1) {
hide("step2")
hide("step3")
show("step1")
} else if (step() == 2) {
hide("step1")
hide("step3")
show("step2")
} else if (step() == 3) {
hide("step1")
hide("step2")
show("step3")
# Display a summary of the inputs before submission
output$summary <- renderText({
paste("Name:", input$name, "\n",
"Age:", input$age, "\n",
"Hobby:", input$hobby, "\n",
"Favorite Food:", input$favorite_food)
})
}
})
# Move to the next step
observeEvent(input$next1, {
step(2)
})
# Go back to the previous step
observeEvent(input$prev2, {
step(1)
})
# Move to the confirmation step
observeEvent(input$next2, {
step(3)
})
# Go back to the previous step
observeEvent(input$prev3, {
step(2)
})
# Submit the survey and lock inputs
observeEvent(input$submit_survey, {
# Generate a unique ID (you can use uuid or another method)
unique_id <- paste0("user_", as.character(Sys.time()))
# Create a dataframe with user data
user_data <- data.frame(
id = unique_id,
name = input$name,
age = input$age,
hobby = input$hobby,
favorite_food = input$favorite_food,
stringsAsFactors = FALSE
)
# Check if file exists, append or create a new file
if (file.exists(file_path)) {
write.table(user_data, file = file_path, append = TRUE, row.names = FALSE, col.names = FALSE, sep = ",")
} else {
write.csv(user_data, file = file_path, row.names = FALSE)
}
# Disable inputs after submission
disable("name")
disable("age")
disable("hobby")
disable("favorite_food")
# Show feedback panel and hide survey
hide("survey")
show("feedback")
# Display feedback message
output$feedback <- renderText({
paste("Thank you,", input$name, "!", "You are", input$age, "years old.",
"Your hobby is", input$hobby, "and your favorite food is", input$favorite_food, ".")
})
})
}
shinyApp(ui = ui, server = server)
source("~/.active-rstudio-document")
runApp()
runApp()
